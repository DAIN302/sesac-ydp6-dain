package _05_class._abstract;

// 추상 클래스
// 사용 이유 : 공통된 필드와 메소드 이름 통일
// - 실체 클래스 작성 시간 절약
// -> 추상 클래스에 공통된 필드와 메소드가 정의되어 있으므로

// 추상 클래스는 new 연산자로 인스턴스 생성 불가
public abstract class Shape {
    // 필드 선언
    String color; // default

    // 생성자 선언
    // 추상 클래스는 new 연산자로 인스턴스 생성읇 할 수 없는데 생성자를 선언한다?
    // 왜? -> 자식 클래스의 생성자에서 super 를 사용하기 위해 선언
    public Shape(String color) {
        this.color = color;
    }

    // 추상 메서드 선언
    // abstract 키워드 사용
    // - 메서드의 선언부만 있느 메서드
    // - 자식 클래스에서 재정의되어 실행 내용 결정
    // - 모든 실체들이 갖는 메서드 실행 내용이 동일하다면 추상 클래스에 메소드를 작성하는 것이 좋음
    // - 해당 블록내에서 start() 메서드
    // - 메서드의 선언만 동일하고 실행 내용이 실제 클래스마다 달라야하는 경우가 있을 때,
    // - 자식 클래스는 추상 메서드를 재정의해서 실행 내용을 작성해야하고, 그렇지 않으면 컴파일 에러
    abstract void draw();

    // 일반 메서드 선언
    void start(){
        System.out.println("도형을 그려보자");
    }
}
