<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Socket.io 채팅</title>
    
    <!-- socket CDN -->
    <!-- 서버가 실행중이지 않아도 클라이언트 라이브러리 사용 가능 -->
    <!-- <script src="https://cdn.socket.io/4.7.5/socket.io.min.js" integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO" crossorigin="anonymous"></script> -->
    <!-- socket.io 서버가 제공하는 클라이언트 라이브러리 -->
    <!-- 서버에서 자동 제공, socket.io서버가 실행 중일 때 작동 -->
    <script src="/socket.io/socket.io.js"></script>
    <style>
        /* 실습 2 채팅창 UI 만들기 */
        .chat-box {
            background-color: pink;
            height: 500px;
            padding: 10px;
            overflow-y: auto;
            position: relative;
        }

        .chat-list div {
            margin-top: 3px;
        }
        .chat-list div div {
            display: inline-block;
            padding: 3px 10px;
            border-radius: 10px;
        }

        .my-chat {
            text-align: right;
        }
        .my-chat div {
            background-color: rgb(253, 231, 235);
        }

        .other-chat div {
            background-color: #fff;
        }

        .secret-chat.other-chat div {
            background-color: lightyellow;
        }

        /* 실습 3 채팅창 입장 안내 문구 */
        .notice{
            text-align: center;
            color: #333;
            font-size: 12px;
        }

        .d-none {
            display: none;
        }

        .msg-box {
            position: absolute;
            bottom: 0;
        }

    </style>
</head>
<body>
    <h1>My Chat</h1>
    <!-- 실습 1 : 각 버튼을 누를 때마다 서버로 메시지 보내기 -->
    <button onclick="saySomething('hello', 'hello', 'hello2')">Hello</button>
    <button onclick="saySomething('study', 'study', 'study2')">Study</button>
    <button onclick="saySomething('bye', 'bye', 'bye2')">Bye</button>
    <p id="from-server"></p>

    <!-- 실습 3-2 : 채팅창 입장 문구 socket.id를 닉네임으로 바꾸기 -->
    <div class="entry-box">
        <input type="text" name="" id="nickname" placeholder="닉네임을 적어주세요" autofocus>
        <button onclick="join()">입장</button>
    </div>

    <!-- [참고] keyCode 아는 방법 -->
    <!-- enter의 keyCode = 13 -->
    <!-- <input type="text" id="myInput"> -->

    <!-- 실습 2 : 채팅 UI 만들기 -->
    <main class="chat-box d-none">
        <div class="chat-list">
            <!-- <div class="my-chat">
                <div>user1 : msg1</div>
            </div>
            <div class="other-chat">
                <div>user2 : msg2</div>
            </div> -->
        </div>
        <!-- 메시지 전송 영역 -->
        <div class="msg-box">
            <select id="nick-list"></select>에게
            <input type="text" id="message">
            <button type="button" onclick="send()">전송</button>
        </div>
    </main>




    <script>
        // 참고 : keyCode 아는 방법
        // document.getElementById('myInput').addEventListener('keydown', (e)=>{
        //     console.log(e.keyCode);
        // })

        

        let socket = io(); // socket 사용을 위한 객체 생성
        // socket.on('connect', ()=>{
        //     console.log('클라이언트 연결 완료', socket.id);
        //     // 클라이언트 연결 완료 P1dD9-CpaPQgLRZyAAAB -> 새로고침 할때마다 socket.id 변경됨!
        //     console.log(socket);
        // }) // 소켓 연결 완료
        // 위의 메서드를 쓰지 않아도 소켓 CDN 라이브러리 불러옴으로써 연결된것!

        let myNick // 내 닉네임을 담을 곳

        // 실습 1 
        function sayHello() {
            // 서버에 요청 보내기
            socket.emit('hello', {who : 'client', msg : 'hello'})
            // 서버로부터 응답 받기
            socket.on('hellokr', (data)=>{
                // console.log(data);
                document.querySelector('#from-server').textContent = `${data.who} : ${data.msg}`
            })
        }
        function sayStudy() {
            // 서버에 요청 보내기
            socket.emit('study', {who : 'client', msg : 'study'})
            // 서버로부터 응답 받기
            socket.on('studykr', (data)=>{
                // console.log(data);Í
                document.querySelector('#from-server').textContent = `${data.who} : ${data.msg}`
            })
        }
        function sayBye() {
            // 서버에 요청 보내기
            socket.emit('bye', {who : 'client', msg : 'bye'})
            // 서버로부터 응답 받기
            socket.on('bye2', (data)=>{
                // console.log(data);››Í
                document.querySelector('#from-server').textContent = `${data.who} : ${data.msg}`
            })
        }

        function saySomething(event, msg, event2) {
            // 서버에 요청 보내기Í
            socket.emit(event, {who : 'client', msg})
            // 서버로부터 응답 받기
            socket.on(event2, (data)=>{
                document.querySelector('#from-server').textContent = `${data.who} : ${data.msg}`
            })
        }

        // 실습 3 : 입장 안내 문구
        socket.on('notice', (msg)=>{
            // console.log(msg);
            document.querySelector('.chat-list').insertAdjacentHTML('beforeend', 
            `<div class="notice">${msg}</div`)

            // insertAdjacentHTML() vs innerHTML
            // insertAdjacentHTML -> 삽입할 위치 명시적으로 지정 가능, 특정 위치에 HTML 추가할 때 사용
            // beforeend, beforebegin, afterend, afterbegin
            // innerHTML -> 요소의 전체 내용 대체, 요소의 내용을 한 번에 대체하거나 가져오기 가능(내용 덮어씌우기)
        })

        // 실습 3-2 : 채팅창 입장 문구 socket.id를 닉네임으로 바꾸기
        function join() {
            const nickName = document.querySelector('#nickname')
            socket.emit('setnick', nickName.value)       
        }

        // 실습 3-2-1 : 채팅창 입장 문구
        // 닉네임 중복 -> alert창 띄우기
        socket.on('error', (data)=>{
            alert(data)
        })

        // 실습 3-2-2 : 닉네임 입력창 비활성화
        socket.on('entrySuccess', (nick)=>{
            myNick = nick // 내 닉네임 저장
            console.log('내 닉네임', myNick);
            document.querySelector('#nickname').disabled = true; // 인풋창 비활성화 
            document.querySelector(".entry-box > button").disabled = true; // 버튼창 비활성화
            document.querySelector('.chat-box').classList.remove('d-none');
        })

        // 실습 3-2-3
        // 유저 목록 업데이트 (select 박스의 option태그 갯수 변경)
        socket.on('updateNicks', (nickObjs)=>{
            // console.log('클라이언트 닉네임 목록', nickObjs);
            let options = `<option value="all">전체</option>`

            for(let nick in nickObjs){ // 사실 변수명은 암묵적으로 key로 많이 사용함
                // 추가 실습 나에게 dm 시 메시지 2번 찍히는 이슈(option태그에 본인 제외)
                if(nick!==socket.id) {
                    options += 
                    `<option value="${nick}">${nickObjs[nick]}</option>`
                }    
            }

            document.querySelector("#nick-list").innerHTML = options
        })

        // 실습 4 : 채팅창 메시지 전송
        function send() {
            // send 이벤트 전송
            const data = {
                // 전체 : all, 그외 다른 닉네임 : socket.id
                // 위의 option 값에 value값을 socket.id로 정함
                dm : document.querySelector('#nick-list').value, // 누구에게
                myNick, // 내 닉네임
                msg : document.querySelector('#message').value, // 메시지 내용
            }

            console.log('data',data);
            socket.emit('send', data)
            document.querySelector('#message').value = ''; // input값 초기화
        }

        // 실습 4-2 채팅창 메시지 전송
        // newMessage를 받아서 닉네임 : 입력창 내용 보여주기
        // 내가 보낸 메시지 -> 오른쪽 / 다른 사람이 보낸 메시지 -> 왼쪽
        socket.on('newMessage', (data)=>{
            console.log('클라이언트 측 메시지 데이터',data);

            let chatList = document.querySelector('.chat-list')
            let chatBox = document.querySelector('.chat-box')
            let div = document.createElement('div') // .my-chat or .other-chat
            let divChat = document.createElement('div') // 가장 안쪽 div - 대화 내용
            if(myNick === data.nick) {
                // 내가 보낸 메시지
                div.classList.add('my-chat')
            } else {
                div.classList.add('other-chat')
            }

            // 실습 5 : dm기능 추가
            if(data.dm){
                div.classList.add('secret-chat');
                divChat.textContent = data.dm
            }

            // 실습 4-2 : 실제 대화내용이 추가되는 부분
            divChat.textContent += `${data.nick} : ${data.msg}`
            div.append(divChat)
            chatList.append(div)

            // 메시지가 많아져서 스크롤이 생기더라도 하단에 고정
            chatBox.scrollTop = chatBox.scrollHeight
        })

        document.querySelector('#nickname').addEventListener('keypress', (e)=>{
            if(e.keyCode === 13) {
                join()
            }  
        })
        document.querySelector('#message').addEventListener('keypress', (e)=>{
            if(e.keyCode === 13) {
                send()
            }  
        })

        
    </script>
</body>
</html>