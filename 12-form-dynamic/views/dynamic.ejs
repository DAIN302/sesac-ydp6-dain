<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 form 전송</title>
    <!-- jQuery CDN (ajax 사용 위헤 불러옴) -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!-- Axios CDN -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1><%= title%></h1>
    <!-- 페이지 전송이 일어나지 않으므로 action 사용 X -->
    <form name="register">
        <label for="name">이름</label>
        <input type="text" name="name" id="name" required>
        <br>
        <span>성별</span>
        <input type="radio" name="gender" id="male" value="남성" required>
        <label for="male">남성</label>
        <input type="radio" name="gender" id="female" value="여성" required>
        <label for="female">여성</label>
        <br>
        <button type="button" onclick="ajaxGet()">ajax get 방식 요청</button>
        <button type="button" onclick="ajaxPOST()">ajax post 방식 요청</button>
        <br>
        <button type="button" onclick="axiosGet()">axios get 방식 요청</button>
        <button type="button" onclick="axiosPOST()">axios post 방식 요청</button>
        <br>
        <button type="button" onclick="fetchGet()">fetch get 방식 요청</button>
        <button type="button" onclick="fetchPOST()">fetch post 방식 요청</button>
    </form>
    <button onClick="getTodos()">외부 API를 이용해 TODO 불러오기</button>
    <div class="result"></div>
    <script>
        const resultBox = document.querySelector(".result");

        function getTodos(){
            fetch('https://jsonplaceholder.typicode.com/todos/1')
            .then(response => response.json())
            .then(json => {
                console.log(json)
                resultBox.textContent = `${json.title} (${json.completed ? 'done':'doing'})`
            })
        }

        // ajax get 방식 요청하는 함수
        function ajaxGet(){
            // 1. 폼 요소 선택
            const form = document.forms['register']
            
            // 2. 폼 요소의 값 추출
            // console.dir(form); // console.dir() html 요소를 객체처럼 트리구조로 출력해줌(계층적인 목록으로 나타냄)
            // console.dir(form.gender.value); 

            // 서버로 보낼 데이터 양식 생성
            const data = {
                name : form.name.value,
                gender : form.gender.value
            }


            // 3. ajax 비동기 통신 GET 방식
            // (서버의 index.js 파일로 유저가 브라우저에 입력한 값을 보내기)
            $.ajax({
                type : 'GET', // get 방식으로 요청을 보낼 것이다.
                url : '/ajax', // form 태그의 action 역할 -> 요청을 받을 서버 측 경로
                data, // key-value 값이 동일하면 생략해서 하나만 써도 됨 data: data와 동일
                success : function(data){ // server 에서 req.query 로 받은 데이터를 여기서 받는다.
                    console.log(data);
                    resultBox.textContent = 
                    `GET ajax 요청에 대한 응답 완료 ${data.name}님은 ${data.gender}이시죠?`
                    resultBox.style.color = 'blue';
                }
            })
        }

        // ajax post 방식 요청하는 함수
        function ajaxPOST(){
            // 1. 폼 요소 선택
            const form = document.forms['register']

            // 2. 폼 요소 값 추출
            const data = {
                name : form.name.value,
                gender : form.gender.value
            }

             // 3. ajax 비동기 통신 POST 방식
             $.ajax({
                type : 'POST', // post 방식으로 요청을 보낼 것이다.
                url : '/ajax', 
                data, 
                success : function(data){ // server 에서 req.query 로 받은 데이터를 여기서 받는다.
                    console.log(data);
                    resultBox.textContent = 
                    `POST ajax 요청에 대한 응답 완료 ${data.name}님은 ${data.gender}이시죠?`
                    resultBox.style.color = 'red';
                }
            })
        }

        // axios get 방식 요청하는 함수
        async function axiosGet(){
            // console.log('axios get');
            // 1. 폼 요소 선택
            const form = document.forms['register']

            // 2. 폼 요소 값 추출
            const data = {
                name : form.name.value,
                gender : form.gender.value
            }

            // 퀴즈. 동적폼전송 유효성 검사
            if(!form.name.checkValidity()) {
                // 이름 미입력 시 : "이름을 입력해주세요"
                resultBox.textContent = '이름을 입력해주세요.'
            } 
            else if(!form.gender[0].checkValidity()){
                // radio type의 인풋은 둘 중 하나라도 check되면 전부 true, 아니면 false 출력
                // 아 그럼 굳이 위에서 둘다 잡을 필요는 없었겠군...
                // 성별 미입력 시 : "성별을 선택해주세요"
                resultBox.textContent = '성별을 선택해주세요.'
            } 
            else {
            // 이름과 성별이 모두 입력되었다면 정상적으로 요청 날리기
            // 3. axios 비동기 통신 GET 방식
                // 실습) axios code async/await 로 바꾸고 try...catch로 예외처리하기
                axios({
                    method : 'GET',
                    // i) params 키를 이용하지 않는다면 요청 url에 query string 작성
                    url : `/axios?name=${form.name.value}&gender=${form.gender.value}`,
                    // ii) params 키를 이용하는 경우
                    //url : '/axios',
                    //params : data, // get 방식은 data를 params에서 보냄
                }).then(function (res) {
                    // console.log(res); // 서버의 응답 결과를 부가적인 정보와 함께 출력
                    // console.log(res.data); // req.query 정보가 담김 { name: '김토끼', gender: '여성' }
                    // res.status -> HTTP status code(상태코드) / res.statusText -> 상태 괜찮은지 표시
                    // res.headers -> 응답의 헤더 / res.config -> 응답의 설정
                    const { name, gender } = res.data;
                    resultBox.textContent = 
                    `GET axios 요청에 대한 응답 완료 ${name}님은 ${gender}이시죠?`
                    resultBox.style.color = 'green'
                }).catch((err)=>{
                    console.error(err)
                    resultBox.textContent = '알 수 없는 에러 발생... 다시 시도해주세요'
                })
             }   
        }

        // axios post 방식 요청하는 함수
        function axiosPOST(){
            // console.log('axios get');
            // 1. 폼 요소 선택
            const form = document.forms['register']

            // 2. 폼 요소 값 추출
            const data = {
                name : form.name.value,
                gender : form.gender.value
            }

            // 3. axios 비동기 통신 POST 방식
            axios({
                method : 'POST',
                url : '/axios',
                data, // post 방식은 data를 data에서 보냄 -> get 요청이 아닌 요청들은 모두 data 키에 정보를 실어서 보내야 함
            }).then((res)=>{
                const { name, gender } = res.data;
                resultBox.textContent = 
                `POST axios 요청에 대한 응답 완료 ${name}님은 ${gender}이시죠?`
                resultBox.style.color = 'gold'
            }).catch(err=>{
                console.error(err);
                resultBox.textContent = '알 수 없는 에러 발생... 다시 시도해주세요'
            })
        }

        // fetch get 방식 요청하는 함수
        function fetchGet() {
            // 1. 폼 요소 선택
            const form = document.forms['register']
            const urlQuery = `?name=${form.name.value}&gender=${form.gender.value}`

            // fetch() get방식이 디폴트
            // fetch(`fetch${urlQuery}`, {method : 'GET'})
            fetch(`fetch${urlQuery}`).then((res)=>{
                console.log(res);
                return res.json(); // res 객체로부터 json 포맷의 응답을 js obj로 변환 -> axios는 이게 자동인데 얘는 아니라 따로 설정해줘야함
            }).then((data)=>{
                console.log(data); // js obj 
                resultBox.textContent = 
                `GET fetch 요청에 대한 응답 완료 ${data.name}님은 ${data.gender}이시죠?`
                resultBox.style.color = 'limegreen'
            })
        }

        // fetch post 방식 요청하는 함수
        function fetchPOST() {
            // 1. 폼 요소 선택
            const form = document.forms['register']

            // 2. 폼 요소 값 추출
            const data = {
                name : form.name.value,
                gender : form.gender.value
            }

            // fetch POST 요청 시 headers 옵션을 통해 JSON 포맷을 사용한다고 알려줘야함
            // => body 에서도 json 형식으로 데이터를 바꾸어 보내야함
            fetch(`fetch`, {
                method : 'POST',
                headers : {'Content-Type': 'application/json'},
                body : JSON.stringify(data) // js obj -> json
            }).then((res)=>{
                console.log(res);
                return res.json(); 
            }).then((data)=>{
                console.log(data); // js obj 
                resultBox.textContent = 
                `POST fetch 요청에 대한 응답 완료 ${data.name}님은 ${data.gender}이시죠?`
                resultBox.style.color = 'hotpink'
            })
        }
    </script>
</body>
</html>