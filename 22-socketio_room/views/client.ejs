<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ROOM CHAT</title>
    <!-- socket CDN -->
    <script src="/socket.io/socket.io.js"></script>
    <style>
        #body {
            width: 100%;
            height: 70vh;
            position: relative;
            background-color: pink;
        }

        #chat {
            position: absolute;
            bottom: 0;
            display: flex;
            justify-content: space-between;
            width: 100%;
        }

        #notice {
            display: flex;
            flex-direction: column;
            text-align: center;
            color: #aaa;
        }

        #notice p {
            margin: 0;
        }

        .my-chat {
            display: flex;
            justify-content: end;
            padding: 2px 0px;
        }
        
        .my-chat p {
            margin: 0;
            padding: 10px;
            background-color: yellow;
            border-radius: 10px;
            margin-right: 10px;
        }
        .other-chat {
            display: flex;
            justify-content: start;
            padding: 2px 0px;
            
        }
        .other-chat p {
            margin: 0;
            padding: 10px;
            background-color: white;
            border-radius: 10px;
            margin-left: 10px;
        }
        .secret-chat p {
            background-color: lightgreen;
        }
    </style>
</head>
<body>
    <h1>채팅방</h1>
    <!-- 채팅방 설정 -->
    <div id="main">
        <form id="room">
            <input type="text" id="roomName" placeholder="채팅방 만들기">
            <input type="text" id="userName" placeholder="닉네임 입력">
            <button>생성</button>
        </form>
        <!-- 채팅방 목록 -->
        <h3>채팅방 목록</h3>
        <ul id="lists"></ul>
    </div>
    <!-- 채팅창 화면 -->
    <div id="body" hidden>
        <div id="message">
            <div id="notice"></div>
        </div>
        <!-- 채팅 입력 구간 -->
        <form id="chat">
            <select id="userList"></select>
            <input type="text" id="chatMessage" placeholder="메시지 입력">
            <button>입력</button>
        </form>
    </div>
    <script>
        // 1. 변수 정의
        const socket = io();

        const roomForm = document.querySelector('#room');
        const chatForm = document.querySelector('#chat');
        const notice = document.querySelector('#notice');
        const message = document.querySelector('#message');
        // 내 닉네임 담을 변수
        let myName = '';

        // form 이벤트 사용(서버에게 요청)

        // 2 채팅방 생성
        roomForm.addEventListener('submit', (e)=>{
            e.preventDefault(); // 제출 이벤트 방지(페이지 새로고침 방지)
            const roomName = document.querySelector('#roomName').value; // 채팅방 제목
            const userName = document.querySelector('#userName').value; // 채팅방 제목
            
            if(roomName === '' || userName === ''){
                alert('방 제목과 닉네임을 입력하세요');
                return;
            }

            socket.emit('create', {roomName, userName}) // 클라이언트에서 입력한 채팅방, 유저이름을 받아서 객체 형태로 서버로 보내줌
            const main = document.querySelector('#main');
            const body = document.querySelector('#body');
            main.hidden = true;
            body.hidden = false;
            myName = userName; // 닉네임 저장
        })

        // 6. 메시지 전송
        chatForm.addEventListener('submit', (e)=>{
            e.preventDefault();
            const chatMesssage = chatForm.querySelector('#chatMessage')
            const user = chatForm.querySelector('#userList')
            socket.emit('sendMessage', 
            {message : chatMesssage.value, user : myName, select : user.value})
            chatMesssage.value = ''; // 입력값 초기화
        })

        // socket 이벤트
        // 3. 공지 알림(본인 제외)
        socket.on('notice', (res)=>{ // res -> userName님이 입장하셨습니다.
            const div = document.createElement('div');
            const p = document.createElement('p');
            console.log('notice', res);

            p.textContent = res;

            div.appendChild(p)
            notice.appendChild(div)  
        })

        // 4. 유저 리스트 갱신
        socket.on('userList', (res)=>{ // res -> 서버에서 보내준 userList 객체 데이터
            console.log('클라이언트쪽', res);
            const list = document.querySelector('#userList')
            let options = `<option value="all">전체</option>`
            for(let i of res){
                options += `<option value="${i.key}">${i.userName}</option>`
            }

            list.innerHTML = options
        })

        // 5. 개설된 채팅방 목록
        // 접속하자마자 채팅방 목록이 보여야 하기 때문에 'connect' 이벤트 사용
        socket.on('connect', ()=>{
            // 서버에서 보내준 roomList 데이터를 받아서 클라이언트에서 보여주기
            socket.on('roomList', (res)=>{  // res -> 서버에서 보내준 roomList 배열 데이터
                // console.log(res);
                const lists = document.querySelector("#lists")
                lists.innerHTML = '' // 리스트 초기화

                // 채팅방 목록 생성
                res.forEach(room=>{
                    const li = document.createElement('li') 
                    li.textContent = `${room}`;
                    lists.appendChild(li);
                })

            })
        })

        // 6. 메시지 전송
        socket.on('newMessage', (res)=>{ // res -> 서버에서 보내준 {message : '', user : '', dm : false})
            // console.log(res);
            const div = document.createElement('div')
            const p = document.createElement('p')

            if(myName === res.user){
                // 내가 입력한 텍스트
                div.classList.add('my-chat')
            } else {
                // 상대방이 입력한 텍스트
                div.classList.add('other-chat')
            }

            // 개인 메시지일 때
            if(res.dm) {
                div.classList.add('secret-chat')
            }

            p.textContent = `${res.user} : ${res.message}`
            div.appendChild(p)
            message.appendChild(div)
            // 귓속말 기능 추가

        })

    </script>
</body>
</html>