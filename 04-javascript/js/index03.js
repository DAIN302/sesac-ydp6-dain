console.log("dd")

// chapter 1 
// 변수 선언 : 변수 정의.
// 변수 할당 : = 연산자를 이용해 값을 넣음
// 변수 초기화 : 변수에 처음 할당하는 순간

// ### var
// - 선언 단계와 초기화, 할당 단계가 동시에 진행, 초기화에는 undefined 값이 들어감
// - 중복 선언, 재선언이 가능 대신 예기치 못한 값을 반환할 수 있음
// - 선언 이전에 참조하면 언제나 undefined 반환

// ### let
// - 변수 중복 선언은 불가능(재선언 불가)하지만, 재할당은 가능

// ### const
// - 재선언 및 재할당 불가능
// - 초반에 선언을 할 때 반드시 초기화를 동시에 진행해야 함(선언과 동시에 값을 할당해야함)


// console.log(a);
// chapter 2 
// 변수 선언 키워드 #1 : var
var a; // 변수 선언
console.log(a); // 값을 할당하지 않았음 -> undefined 반환

a = "나는 var 다" // 변수 할당
console.log(a); // 변수 값 출력

var a2 = 4; // 변수 선언 & 할당
console.log(a2); // 변수 값 출력

var a2 = 5; // 변수 중복선언 가능
console.log(a2); // 변수 값 출력

a2 = 6; // 변수 재할당
console.log(a2); // 변수 값 출력

///////////////////////////////////////////////
// var 변수의 문제점
// 1. 중간에 같은 이름의 변수를 다시 선언해도 기존의 변수에 덮어 씌움
// - 변수를 선언했다는것은 다른 대이터를 넣으려는 것인데 그것을 기존의 데이터에 덮어씌우면 문제가 발생할 수 있음!!!
// 2. 변수가 (블록 단위) 에서 역할이 끝나는 게 아니라 전역으로 돌아다니면서 영향력을 행사
// -> 의도치 않은 문제 발생
// 3. 호이스팅 문제
// -> 따라서 ES6 문법부터는 var 대신 let 사용 권장
// ** ES6 : 자바스크립트 표준 버전 중 하나

///////////////////////////////////////////////

// 변수 선언 키워드 #2 : let
let b; // 변수 선언
console.log(b) // 값을 할당하지 않음 -> undefined
b=7; // 변수 할당
console.log(b) // 변수 값 출력

let b2 = 77; // 변수 선언 & 할당
console.log(b2) // 변수 값 출력
// let b2 = 78; // let 은 중복선언 불가능으로 에러뜸

b2=79; // 변수 재할당
console.log(b2) // 변수 값 출력

// 변수 선언 키워드 #3 : const
// -> 변수 선언과 할당을 반드시 동시에 함
// -> 변하지 않는 값을 변수에 저장할 떄 사용(상수)
// const a; -> error 선언과 핳당을 반드시 동시애!
const c = 3;
console.log(c);
// c=33; -> const는 재할당이 불가능함



///////////////////////////////////////////////
// chapter 4
// ** 호이스팅
// 자바스크립트에서 변수 및 함수 선언이 코드의 최상단으로 올려지는 현상
// -> 변수와 함수의 선언이 실제 코드의 실행 전에 처리
// -> 코드를 이해하고 예측하는데 혼란을 야기함

console.log(x) // undefined
var x = 10;
console.log(x) // 10
// 실제 JS 엔진은 이렇게 해석함
// 로그를 찍기전에 var x 라고 선언한 것으로 인식
// 호이스팅 -> 변수 선언이 코드의 최상단으로 끌어올려지는 것
// 변수 x 가 선언되기 전에 사용했지만, JS 엔진은 선언을 최상단으로 올려서 undefined 로 출력한 후,
// 나중에 변수를 초기화해서 값을 할당
// let, const 는 호이스팅을 줄이고 블록스코프를 제공하여 변수의 유효범위를 명확히 함.






